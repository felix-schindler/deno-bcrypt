name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions:
      contents: read
      id-token: write # The OIDC ID token is used for authentication with JSR.
    strategy:
      matrix:
        os: [
          macos-latest,
          macos-15-intel,
          windows-latest,
          ubuntu-latest,
          ubuntu-24.04-arm,
        ]
        kind: ["test", "lint"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rust with rustfmt and clippy
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Log versions
        run: |
          deno --version
          rustc --version
          cargo --version

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ matrix.kind }}-${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Clippy
        if: matrix.kind == 'lint'
        run: cargo clippy --all-targets --release --locked -- -D clippy::all

      - name: Build
        if: matrix.kind == 'test'
        run: cargo build --release --locked

      - name: Test TypeScript
        if: matrix.kind == 'test'
        run: deno task test

      - name: Rename artifacts for uniqueness
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-latest'
        run: |
          case "${{ runner.os }}" in
            Linux)   ext=so;   prefix=lib;;
            macOS)   ext=dylib; prefix=lib;;
          esac
          mv target/release/${prefix}deno_argon2.${ext} \
          target/release/${prefix}deno_argon2-${{ runner.arch }}.${ext}

      - name: Lint TypeScript
        if: matrix.kind == 'lint' && matrix.os == 'ubuntu-latest'
        run: deno task ok

      - name: Release
        uses: softprops/action-gh-release@v2
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REPO_TOKEN }}
        with:
          files: |
            target/${{ matrix.target }}/release/libdeno_bcrypt-${{ runner.arch }}.dylib
            target/${{ matrix.target }}/release/libdeno_bcrypt-${{ runner.arch }}.so
            target/${{ matrix.target }}/release/deno_bcrypt.dll

      - name: Publish to JSR
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
        run: deno publish

      - name: After Release Test
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/')
        run: deno test -A
